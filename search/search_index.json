{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket. Theoretical Foundation Governing Equations Projectile motion follows from Newton's second law of motion. The standard equations for motion in two dimensions are: Horizontal motion: $$ x = v_0 \\cos(\\theta) t $$ Since there is no acceleration in the horizontal direction (ignoring air resistance), velocity remains constant. Vertical motion: $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ The vertical motion follows a parabolic trajectory due to the acceleration caused by gravity. Time of flight: Solving for the time when the projectile returns to the initial height ( \\(y = 0\\) ): $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range equation: Substituting time into the horizontal motion equation gives the range: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation reveals that the range depends on the sine of twice the launch angle, peaking at \\(\\theta = 45^\\circ\\) . Analysis of the Range Dependence on Angle of Projection From the range equation, we observe: - Maximum range occurs at 45 degrees for a given initial velocity and gravitational acceleration. - Complementary angles (e.g., 30\u00b0 and 60\u00b0 ) yield the same range. Effect of Other Parameters Initial velocity ( \\(v_0\\) ) : Higher velocity increases range quadratically. Gravitational acceleration ( \\(g\\) ) : A stronger gravitational pull decreases range. Launch height ( \\(h\\) ) : If launched from a height \\(h\\) , a more complex range equation emerges: $$ R = v_0 \\cos(\\theta) \\left( \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh}}{g} \\right) $$ Practical Applications This model is applicable in various real-world scenarios: - Sports: Understanding optimal angles in basketball, soccer, and golf. - Engineering: Ballistics, missile trajectories, and projectile-based calculations. - Astrophysics: Studying planetary landings and escape trajectories. - Game Development: Implementing realistic physics in video games. Implementation We develop a Python script to: 1. Simulate projectile motion. 2. Plot the range as a function of launch angle. 3. Explore parameter variations. Python Code: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g=9.81): angles = np.linspace(0, 90, 100) # Angles from 0 to 90 degrees ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle of Projection') plt.legend() plt.grid() plt.show() # Example usage projectile_range(v0=20) Discussion and Limitations Idealized Model Assumptions: No air resistance: In real scenarios, drag significantly alters projectile motion. Constant gravity: Small deviations occur with altitude changes. Flat terrain: Uneven surfaces require terrain-based modeling. Future Enhancements: Incorporating air resistance for more realistic simulations. Modeling projectile motion in different planetary environments. Extending to 3D motion with wind effects. This study offers a detailed yet intuitive exploration of projectile motion, demonstrating its theoretical and practical significance across multiple fields.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations","text":"Projectile motion follows from Newton's second law of motion. The standard equations for motion in two dimensions are: Horizontal motion: $$ x = v_0 \\cos(\\theta) t $$ Since there is no acceleration in the horizontal direction (ignoring air resistance), velocity remains constant. Vertical motion: $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ The vertical motion follows a parabolic trajectory due to the acceleration caused by gravity. Time of flight: Solving for the time when the projectile returns to the initial height ( \\(y = 0\\) ): $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range equation: Substituting time into the horizontal motion equation gives the range: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation reveals that the range depends on the sine of twice the launch angle, peaking at \\(\\theta = 45^\\circ\\) .","title":"Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle-of-projection","text":"From the range equation, we observe: - Maximum range occurs at 45 degrees for a given initial velocity and gravitational acceleration. - Complementary angles (e.g., 30\u00b0 and 60\u00b0 ) yield the same range.","title":"Dependence on Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-other-parameters","text":"Initial velocity ( \\(v_0\\) ) : Higher velocity increases range quadratically. Gravitational acceleration ( \\(g\\) ) : A stronger gravitational pull decreases range. Launch height ( \\(h\\) ) : If launched from a height \\(h\\) , a more complex range equation emerges: $$ R = v_0 \\cos(\\theta) \\left( \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh}}{g} \\right) $$","title":"Effect of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"This model is applicable in various real-world scenarios: - Sports: Understanding optimal angles in basketball, soccer, and golf. - Engineering: Ballistics, missile trajectories, and projectile-based calculations. - Astrophysics: Studying planetary landings and escape trajectories. - Game Development: Implementing realistic physics in video games.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation","text":"We develop a Python script to: 1. Simulate projectile motion. 2. Plot the range as a function of launch angle. 3. Explore parameter variations. Python Code: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g=9.81): angles = np.linspace(0, 90, 100) # Angles from 0 to 90 degrees ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle of Projection') plt.legend() plt.grid() plt.show() # Example usage projectile_range(v0=20)","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-and-limitations","text":"","title":"Discussion and Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#idealized-model-assumptions","text":"No air resistance: In real scenarios, drag significantly alters projectile motion. Constant gravity: Small deviations occur with altitude changes. Flat terrain: Uneven surfaces require terrain-based modeling.","title":"Idealized Model Assumptions:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#future-enhancements","text":"Incorporating air resistance for more realistic simulations. Modeling projectile motion in different planetary environments. Extending to 3D motion with wind effects. This study offers a detailed yet intuitive exploration of projectile motion, demonstrating its theoretical and practical significance across multiple fields.","title":"Future Enhancements:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 HELLO World this is a test message","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"HELLO World this is a test message","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"import numpy as np import matplotlib.pyplot as plt import os Create a directory to save figures if it doesn't exist if not os.path.exists(\"figures\"): os.makedirs(\"figures\") 1. Theoretical Foundation: Calculate the projectile motion trajectory def projectile_motion(theta, v0, g=9.81, h0=0): \"\"\" Calculate the trajectory and range of a projectile. Parameters: theta (float): Launch angle in degrees v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 (default: 9.81) h0 (float): Initial height in meters (default: 0) Returns: range_x (float): Horizontal range in meters x (array): x-coordinates of the trajectory for plotting y (array): y-coordinates of the trajectory for plotting \"\"\" # Convert angle from degrees to radians theta_rad = np.radians(theta) # Calculate the x and y components of the initial velocity v0x = v0 * np.cos(theta_rad) v0y = v0 * np.sin(theta_rad) # Calculate the time of flight by solving the quadratic equation for y(t) = 0 # y(t) = h0 + v0y*t - (1/2)*g*t^2 = 0 a = -0.5 * g b = v0y c = h0 discriminant = b**2 - 4*a*c t_flight = (-b + np.sqrt(discriminant)) / (2*a) # Take the positive root # Calculate the horizontal range (range_x = v0x * t_flight) range_x = v0x * t_flight # Generate points for the trajectory (x, y coordinates) t = np.linspace(0, t_flight, 100) x = v0x * t y = h0 + v0y * t - 0.5 * g * t**2 return range_x, x, y 2. Analysis: Plot the range as a function of the launch angle def analyze_range_vs_angle(v0, g=9.81, h0=0): \"\"\" Analyze and plot the horizontal range as a function of the launch angle. Parameters: v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" # Create an array of angles from 0 to 90 degrees angles = np.linspace(0, 90, 91) ranges = [] # Calculate the range for each angle for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g, h0) ranges.append(range_x) # Plot the range vs. angle plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f\"Initial velocity = {v0} m/s, g = {g} m/s\u00b2, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Horizontal Range vs. Launch Angle\") plt.grid(True) plt.legend() plt.savefig(\"figures/range_vs_angle.png\") plt.show() 3. Visualization: Plot trajectories for different angles def plot_trajectories(v0, angles, g=9.81, h0=0): \"\"\" Plot the trajectories of the projectile for different launch angles. Parameters: v0 (float): Initial velocity in m/s angles (list): List of launch angles in degrees g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" plt.figure(figsize=(10, 6)) for theta in angles: range_x, x, y = projectile_motion(theta, v0, g, h0) plt.plot(x, y, label=f\"Angle = {theta}\u00b0\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(f\"Projectile Trajectories (Initial velocity = {v0} m/s)\") plt.grid(True) plt.legend() plt.savefig(\"figures/trajectories.png\") plt.show() 4. Comparison: Analyze the effect of different initial conditions def compare_different_conditions(): \"\"\" Compare the range for different initial velocities and heights. \"\"\" v0_values = [10, 20, 30] # Different initial velocities h0_values = [0, 10] # Different initial heights angles = np.linspace(0, 90, 91) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: for h0 in h0_values: ranges = [] for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g=9.81, h0=h0) ranges.append(range_x) plt.plot(angles, ranges, label=f\"v0 = {v0} m/s, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Range Comparison for Different Initial Conditions\") plt.grid(True) plt.legend() plt.savefig(\"figures/comparison.png\") plt.show() Main program if name == \" main \": # Define initial parameters v0 = 20 # Initial velocity in m/s angles = [15, 30, 45, 60, 75] # List of angles to plot trajectories # Step 1: Analyze the range as a function of the launch angle print(\"Analyzing the range as a function of the launch angle...\") analyze_range_vs_angle(v0) # Step 2: Plot trajectories for different angles print(\"Plotting trajectories for different angles...\") plot_trajectories(v0, angles) # Step 3: Compare the effect of different initial conditions print(\"Comparing the effect of different initial conditions...\") compare_different_conditions()","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#create-a-directory-to-save-figures-if-it-doesnt-exist","text":"if not os.path.exists(\"figures\"): os.makedirs(\"figures\")","title":"Create a directory to save figures if it doesn't exist"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-theoretical-foundation-calculate-the-projectile-motion-trajectory","text":"def projectile_motion(theta, v0, g=9.81, h0=0): \"\"\" Calculate the trajectory and range of a projectile. Parameters: theta (float): Launch angle in degrees v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 (default: 9.81) h0 (float): Initial height in meters (default: 0) Returns: range_x (float): Horizontal range in meters x (array): x-coordinates of the trajectory for plotting y (array): y-coordinates of the trajectory for plotting \"\"\" # Convert angle from degrees to radians theta_rad = np.radians(theta) # Calculate the x and y components of the initial velocity v0x = v0 * np.cos(theta_rad) v0y = v0 * np.sin(theta_rad) # Calculate the time of flight by solving the quadratic equation for y(t) = 0 # y(t) = h0 + v0y*t - (1/2)*g*t^2 = 0 a = -0.5 * g b = v0y c = h0 discriminant = b**2 - 4*a*c t_flight = (-b + np.sqrt(discriminant)) / (2*a) # Take the positive root # Calculate the horizontal range (range_x = v0x * t_flight) range_x = v0x * t_flight # Generate points for the trajectory (x, y coordinates) t = np.linspace(0, t_flight, 100) x = v0x * t y = h0 + v0y * t - 0.5 * g * t**2 return range_x, x, y","title":"1. Theoretical Foundation: Calculate the projectile motion trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-analysis-plot-the-range-as-a-function-of-the-launch-angle","text":"def analyze_range_vs_angle(v0, g=9.81, h0=0): \"\"\" Analyze and plot the horizontal range as a function of the launch angle. Parameters: v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" # Create an array of angles from 0 to 90 degrees angles = np.linspace(0, 90, 91) ranges = [] # Calculate the range for each angle for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g, h0) ranges.append(range_x) # Plot the range vs. angle plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f\"Initial velocity = {v0} m/s, g = {g} m/s\u00b2, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Horizontal Range vs. Launch Angle\") plt.grid(True) plt.legend() plt.savefig(\"figures/range_vs_angle.png\") plt.show()","title":"2. Analysis: Plot the range as a function of the launch angle"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-visualization-plot-trajectories-for-different-angles","text":"def plot_trajectories(v0, angles, g=9.81, h0=0): \"\"\" Plot the trajectories of the projectile for different launch angles. Parameters: v0 (float): Initial velocity in m/s angles (list): List of launch angles in degrees g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" plt.figure(figsize=(10, 6)) for theta in angles: range_x, x, y = projectile_motion(theta, v0, g, h0) plt.plot(x, y, label=f\"Angle = {theta}\u00b0\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(f\"Projectile Trajectories (Initial velocity = {v0} m/s)\") plt.grid(True) plt.legend() plt.savefig(\"figures/trajectories.png\") plt.show()","title":"3. Visualization: Plot trajectories for different angles"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-comparison-analyze-the-effect-of-different-initial-conditions","text":"def compare_different_conditions(): \"\"\" Compare the range for different initial velocities and heights. \"\"\" v0_values = [10, 20, 30] # Different initial velocities h0_values = [0, 10] # Different initial heights angles = np.linspace(0, 90, 91) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: for h0 in h0_values: ranges = [] for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g=9.81, h0=h0) ranges.append(range_x) plt.plot(angles, ranges, label=f\"v0 = {v0} m/s, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Range Comparison for Different Initial Conditions\") plt.grid(True) plt.legend() plt.savefig(\"figures/comparison.png\") plt.show()","title":"4. Comparison: Analyze the effect of different initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#main-program","text":"if name == \" main \": # Define initial parameters v0 = 20 # Initial velocity in m/s angles = [15, 30, 45, 60, 75] # List of angles to plot trajectories # Step 1: Analyze the range as a function of the launch angle print(\"Analyzing the range as a function of the launch angle...\") analyze_range_vs_angle(v0) # Step 2: Plot trajectories for different angles print(\"Plotting trajectories for different angles...\") plot_trajectories(v0, angles) # Step 3: Compare the effect of different initial conditions print(\"Comparing the effect of different initial conditions...\") compare_different_conditions()","title":"Main program"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}