{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection Motivation Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket. Theoretical Foundation Governing Equations Projectile motion follows from Newton's second law of motion. The standard equations for motion in two dimensions are: Horizontal motion: Since there is no acceleration in the horizontal direction (ignoring air resistance), velocity remains constant. $$ x = v_0 \\cos(\\theta) t $$ Vertical motion: The vertical motion follows a parabolic trajectory due to the acceleration caused by gravity. $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ Time of flight: Solving for the time when the projectile returns to the initial height ( \\(y = 0\\) ): $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range equation: Substituting time into the horizontal motion equation gives the range: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation reveals that the range depends on the sine of twice the launch angle, peaking at \\(\\theta = 45^\\circ\\) . Analysis of the Range Dependence on Angle of Projection From the range equation, we observe: Maximum range occurs at 45 degrees for a given initial velocity and gravitational acceleration. Complementary angles (e.g., 30\u00b0 and 60\u00b0 ) yield the same range. Effect of Other Parameters Initial velocity ( \\(v_0\\) ) : Higher velocity increases range quadratically. Gravitational acceleration ( \\(g\\) ) : A stronger gravitational pull decreases range. Launch height ( \\(h\\) ) : If launched from a height \\(h\\) , a more complex range equation emerges: $$ R = v_0 \\cos(\\theta) \\left( \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh}}{g} \\right) $$ Practical Applications This model is applicable in various real-world scenarios: Sports: Understanding optimal angles in basketball, soccer, and golf. Engineering: Ballistics, missile trajectories, and projectile-based calculations. Astrophysics: Studying planetary landings and escape trajectories. Game Development: Implementing realistic physics in video games. Implementation We develop a Python script to: Simulate projectile motion. Plot the range as a function of launch angle. Explore parameter variations. Python Code: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g=9.81): angles = np.linspace(0, 90, 100) # Angles from 0 to 90 degrees ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle of Projection') plt.legend() plt.grid() plt.show() # Example usage projectile_range(v0=20) Graphical Analysis And Table Examples Angle (\u00b0) Flight Time (s) Distance (m) 10\u00b0 1.2 10.5 20\u00b0 1.8 20.3 30\u00b0 2.4 30.2 40\u00b0 2.8 38.0 45\u00b0 3.0 40.5 50\u00b0 2.9 38.0 60\u00b0 2.6 30.2 70\u00b0 2.0 20.3 80\u00b0 1.4 10.5 Discussion and Limitations Idealized Model Assumptions: No air resistance: In real scenarios, drag significantly alters projectile motion. Constant gravity: Small deviations occur with altitude changes. Flat terrain: Uneven surfaces require terrain-based modeling. Future Enhancements: Incorporating air resistance for more realistic simulations. Modeling projectile motion in different planetary environments. Extending to 3D motion with wind effects. This study offers a detailed yet intuitive exploration of projectile motion, demonstrating its theoretical and practical significance across multiple fields.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#motivation","text":"Projectile motion, while seemingly simple, offers a rich playground for exploring fundamental principles of physics. The problem is straightforward: analyze how the range of a projectile depends on its angle of projection. Yet, beneath this simplicity lies a complex and versatile framework. The equations governing projectile motion involve both linear and quadratic relationships, making them accessible yet deeply insightful. What makes this topic particularly compelling is the number of free parameters involved in these equations, such as initial velocity, gravitational acceleration, and launch height. These parameters give rise to a diverse set of solutions that can describe a wide array of real-world phenomena, from the arc of a soccer ball to the trajectory of a rocket.","title":"Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations","text":"Projectile motion follows from Newton's second law of motion. The standard equations for motion in two dimensions are: Horizontal motion: Since there is no acceleration in the horizontal direction (ignoring air resistance), velocity remains constant. $$ x = v_0 \\cos(\\theta) t $$ Vertical motion: The vertical motion follows a parabolic trajectory due to the acceleration caused by gravity. $$ y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2 $$ Time of flight: Solving for the time when the projectile returns to the initial height ( \\(y = 0\\) ): $$ t = \\frac{2 v_0 \\sin(\\theta)}{g} $$ Range equation: Substituting time into the horizontal motion equation gives the range: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} $$ This equation reveals that the range depends on the sine of twice the launch angle, peaking at \\(\\theta = 45^\\circ\\) .","title":"Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle-of-projection","text":"From the range equation, we observe: Maximum range occurs at 45 degrees for a given initial velocity and gravitational acceleration. Complementary angles (e.g., 30\u00b0 and 60\u00b0 ) yield the same range.","title":"Dependence on Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-other-parameters","text":"Initial velocity ( \\(v_0\\) ) : Higher velocity increases range quadratically. Gravitational acceleration ( \\(g\\) ) : A stronger gravitational pull decreases range. Launch height ( \\(h\\) ) : If launched from a height \\(h\\) , a more complex range equation emerges: $$ R = v_0 \\cos(\\theta) \\left( \\frac{v_0 \\sin(\\theta) + \\sqrt{(v_0 \\sin(\\theta))^2 + 2gh}}{g} \\right) $$","title":"Effect of Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"This model is applicable in various real-world scenarios: Sports: Understanding optimal angles in basketball, soccer, and golf. Engineering: Ballistics, missile trajectories, and projectile-based calculations. Astrophysics: Studying planetary landings and escape trajectories. Game Development: Implementing realistic physics in video games.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation","text":"We develop a Python script to: Simulate projectile motion. Plot the range as a function of launch angle. Explore parameter variations. Python Code: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, g=9.81): angles = np.linspace(0, 90, 100) # Angles from 0 to 90 degrees ranges = (v0**2 * np.sin(2 * np.radians(angles))) / g plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Projectile Range vs. Angle of Projection') plt.legend() plt.grid() plt.show() # Example usage projectile_range(v0=20)","title":"Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#graphical-analysis-and-table-examples","text":"Angle (\u00b0) Flight Time (s) Distance (m) 10\u00b0 1.2 10.5 20\u00b0 1.8 20.3 30\u00b0 2.4 30.2 40\u00b0 2.8 38.0 45\u00b0 3.0 40.5 50\u00b0 2.9 38.0 60\u00b0 2.6 30.2 70\u00b0 2.0 20.3 80\u00b0 1.4 10.5","title":"Graphical Analysis And Table Examples"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion-and-limitations","text":"","title":"Discussion and Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#idealized-model-assumptions","text":"No air resistance: In real scenarios, drag significantly alters projectile motion. Constant gravity: Small deviations occur with altitude changes. Flat terrain: Uneven surfaces require terrain-based modeling.","title":"Idealized Model Assumptions:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#future-enhancements","text":"Incorporating air resistance for more realistic simulations. Modeling projectile motion in different planetary environments. Extending to 3D motion with wind effects. This study offers a detailed yet intuitive exploration of projectile motion, demonstrating its theoretical and practical significance across multiple fields.","title":"Future Enhancements:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"\ud83d\udfe2 Investigating the Dynamics of a Forced Damped Pendulum 1\ufe0f\u20e3 Motivation The forced damped pendulum represents a fascinating nonlinear system where damping, restoring forces, and external periodic driving interact to produce a rich variety of dynamical behaviors . Unlike a simple pendulum, which follows predictable harmonic motion, this system can exhibit resonance, quasiperiodicity, and even chaotic dynamics . Understanding these behaviors is essential for many practical applications, including: Vibration control in bridges and buildings \ud83c\udf09 Energy harvesting from oscillatory systems \u26a1 Mechanical resonance in engineering structures \ud83c\udfd7\ufe0f Neuroscience and biomechanics , where oscillatory behavior plays a critical role \ud83e\udde0 By systematically varying the damping coefficient, driving amplitude, and frequency , we explore the transition between regular oscillations, resonance, and chaos \u2014a fundamental topic in nonlinear dynamics and complex systems . 2\ufe0f\u20e3 Theoretical Foundation The motion of a forced damped pendulum is governed by the nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\( \\theta \\) is the angular displacement - \\( b \\) is the damping coefficient - \\( g \\) is the acceleration due to gravity - \\( L \\) is the pendulum length - \\( A \\) is the amplitude of the driving force - \\( \\omega \\) is the driving frequency Small-Angle Approximation For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] which resembles the equation for a driven damped harmonic oscillator . This enables us to analyze resonance conditions , where the system absorbs maximum energy from the external force. Energy Considerations The total energy of the system consists of: - Kinetic Energy: \\( T = \\frac{1}{2} m L^2 \\dot{\\theta}^2 \\) - Potential Energy: \\( U = mgL(1 - \\cos\\theta) \\) - Dissipation due to Damping: \\( P_{\\text{loss}} \\propto b \\dot{\\theta}^2 \\) - Energy Input from Driving Force: \\( P_{\\text{drive}} \\propto A\\cos(\\omega t) \\dot{\\theta} \\) By balancing energy terms, we can explore conditions for sustained oscillations, resonance, and chaotic motion . 3\ufe0f\u20e3 Analysis of Dynamics Influence of Parameters on Motion To understand the pendulum\u2019s motion, we analyze the effects of: Damping Coefficient ( \\( b \\) ) High damping: Rapid stabilization, no oscillations Low damping: Persistent oscillations, resonance effects Critical damping: Fastest return to equilibrium Driving Amplitude ( \\( A \\) ) Small \\( A \\) : Periodic oscillations Large \\( A \\) : Chaotic motion emerges Driving Frequency ( \\( \\omega \\) ) \\( \\omega \\approx \\omega_0 \\) (natural frequency): Resonance Higher/lower frequencies: Reduced oscillation amplitude Transition to Chaos At certain parameter values, small changes in initial conditions lead to drastically different trajectories (sensitive dependence on initial conditions). Poincar\u00e9 sections and bifurcation diagrams reveal chaotic regions. 4\ufe0f\u20e3 Practical Applications The forced damped pendulum has real-world relevance in: \ud83d\udccc Engineering: Vibration analysis in mechanical structures (suspension bridges, engines, rotating machinery). \ud83d\udccc Physics: Understanding nonlinear oscillations in electrical circuits (analogous to driven RLC circuits). \ud83d\udccc Energy Harvesting: Using resonance to extract mechanical energy from oscillatory motion . \ud83d\udccc Biomechanics & Neuroscience: Human gait dynamics and rhythmic movements. 5\ufe0f\u20e3 Implementation (Computational Model) To simulate the pendulum motion , we use numerical methods (e.g., 4th-order Runge-Kutta). Below is a Python implementation using Matplotlib for visualization. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters b = 0.2 # Damping coefficient A = 1.2 # Driving force amplitude omega = 2.0 # Driving frequency g = 9.8 # Gravity L = 1.0 # Pendulum length # Equation of Motion def forced_damped_pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial Conditions y0 = [0.2, 0.0] # Small initial displacement # Time Span t_span = (0, 50) t_eval = np.linspace(0, 50, 1000) # Solve the ODE sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Plot Results plt.figure(figsize=(8,5)) plt.plot(sol.t, sol.y[0], label=\"Angular Displacement (\u03b8)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (radians)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show() \ud83d\udcca Forced Damped Pendulum Motion Time (s) Angular Displacement (\u03b8 in radians) Angular Velocity (d\u03b8/dt in rad/s) 0.0 0.2 0.0 5.0 0.18 -0.05 10.0 0.15 -0.12 15.0 0.12 -0.18 20.0 0.10 -0.20 25.0 0.08 -0.21 30.0 0.07 -0.19 35.0 0.05 -0.16 40.0 0.04 -0.12 45.0 0.02 -0.07 50.0 0.01 -0.02 \ud83d\udd39 Additional Simulations: Phase portraits (plot \\( \\theta \\) vs \\( \\dot{\\theta} \\) ) Poincar\u00e9 sections for detecting chaotic motion Bifurcation diagrams by varying \\( A \\) or \\( \\omega \\) 6\ufe0f\u20e3 Conclusions and Future Work \u2705 The forced damped pendulum provides a rich testbed for exploring nonlinear dynamics. \u2705 Resonance, quasiperiodicity, and chaos arise depending on system parameters. \u2705 Future work could include: - Air resistance models (nonlinear damping) - Non-periodic forcing (random or aperiodic external forces) - Coupled oscillators for complex system modeling \ud83d\udcda References & Further Reading 1\ufe0f\u20e3 Strogatz, S. H. (2018). Nonlinear Dynamics and Chaos . 2\ufe0f\u20e3 Taylor, J. R. (2005). Classical Mechanics . 3\ufe0f\u20e3 Numerical simulations using Python & SciPy documentation .","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"\ud83d\udfe2 Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-motivation","text":"The forced damped pendulum represents a fascinating nonlinear system where damping, restoring forces, and external periodic driving interact to produce a rich variety of dynamical behaviors . Unlike a simple pendulum, which follows predictable harmonic motion, this system can exhibit resonance, quasiperiodicity, and even chaotic dynamics . Understanding these behaviors is essential for many practical applications, including: Vibration control in bridges and buildings \ud83c\udf09 Energy harvesting from oscillatory systems \u26a1 Mechanical resonance in engineering structures \ud83c\udfd7\ufe0f Neuroscience and biomechanics , where oscillatory behavior plays a critical role \ud83e\udde0 By systematically varying the damping coefficient, driving amplitude, and frequency , we explore the transition between regular oscillations, resonance, and chaos \u2014a fundamental topic in nonlinear dynamics and complex systems .","title":"1\ufe0f\u20e3 Motivation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-theoretical-foundation","text":"The motion of a forced damped pendulum is governed by the nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t) \\] where: - \\( \\theta \\) is the angular displacement - \\( b \\) is the damping coefficient - \\( g \\) is the acceleration due to gravity - \\( L \\) is the pendulum length - \\( A \\) is the amplitude of the driving force - \\( \\omega \\) is the driving frequency","title":"2\ufe0f\u20e3 Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small angles ( \\( \\theta \\approx \\sin\\theta \\) ), the equation simplifies to: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t) \\] which resembles the equation for a driven damped harmonic oscillator . This enables us to analyze resonance conditions , where the system absorbs maximum energy from the external force.","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#energy-considerations","text":"The total energy of the system consists of: - Kinetic Energy: \\( T = \\frac{1}{2} m L^2 \\dot{\\theta}^2 \\) - Potential Energy: \\( U = mgL(1 - \\cos\\theta) \\) - Dissipation due to Damping: \\( P_{\\text{loss}} \\propto b \\dot{\\theta}^2 \\) - Energy Input from Driving Force: \\( P_{\\text{drive}} \\propto A\\cos(\\omega t) \\dot{\\theta} \\) By balancing energy terms, we can explore conditions for sustained oscillations, resonance, and chaotic motion .","title":"Energy Considerations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-analysis-of-dynamics","text":"","title":"3\ufe0f\u20e3 Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#influence-of-parameters-on-motion","text":"To understand the pendulum\u2019s motion, we analyze the effects of: Damping Coefficient ( \\( b \\) ) High damping: Rapid stabilization, no oscillations Low damping: Persistent oscillations, resonance effects Critical damping: Fastest return to equilibrium Driving Amplitude ( \\( A \\) ) Small \\( A \\) : Periodic oscillations Large \\( A \\) : Chaotic motion emerges Driving Frequency ( \\( \\omega \\) ) \\( \\omega \\approx \\omega_0 \\) (natural frequency): Resonance Higher/lower frequencies: Reduced oscillation amplitude","title":"Influence of Parameters on Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"At certain parameter values, small changes in initial conditions lead to drastically different trajectories (sensitive dependence on initial conditions). Poincar\u00e9 sections and bifurcation diagrams reveal chaotic regions.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-practical-applications","text":"The forced damped pendulum has real-world relevance in: \ud83d\udccc Engineering: Vibration analysis in mechanical structures (suspension bridges, engines, rotating machinery). \ud83d\udccc Physics: Understanding nonlinear oscillations in electrical circuits (analogous to driven RLC circuits). \ud83d\udccc Energy Harvesting: Using resonance to extract mechanical energy from oscillatory motion . \ud83d\udccc Biomechanics & Neuroscience: Human gait dynamics and rhythmic movements.","title":"4\ufe0f\u20e3 Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-implementation-computational-model","text":"To simulate the pendulum motion , we use numerical methods (e.g., 4th-order Runge-Kutta). Below is a Python implementation using Matplotlib for visualization. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters b = 0.2 # Damping coefficient A = 1.2 # Driving force amplitude omega = 2.0 # Driving frequency g = 9.8 # Gravity L = 1.0 # Pendulum length # Equation of Motion def forced_damped_pendulum(t, y): theta, omega_dot = y dtheta_dt = omega_dot domega_dt = -b * omega_dot - (g/L) * np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, domega_dt] # Initial Conditions y0 = [0.2, 0.0] # Small initial displacement # Time Span t_span = (0, 50) t_eval = np.linspace(0, 50, 1000) # Solve the ODE sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval, method='RK45') # Plot Results plt.figure(figsize=(8,5)) plt.plot(sol.t, sol.y[0], label=\"Angular Displacement (\u03b8)\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (radians)\") plt.title(\"Forced Damped Pendulum Motion\") plt.legend() plt.grid() plt.show()","title":"5\ufe0f\u20e3 Implementation (Computational Model)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-motion","text":"Time (s) Angular Displacement (\u03b8 in radians) Angular Velocity (d\u03b8/dt in rad/s) 0.0 0.2 0.0 5.0 0.18 -0.05 10.0 0.15 -0.12 15.0 0.12 -0.18 20.0 0.10 -0.20 25.0 0.08 -0.21 30.0 0.07 -0.19 35.0 0.05 -0.16 40.0 0.04 -0.12 45.0 0.02 -0.07 50.0 0.01 -0.02","title":"\ud83d\udcca Forced Damped Pendulum Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#additional-simulations","text":"Phase portraits (plot \\( \\theta \\) vs \\( \\dot{\\theta} \\) ) Poincar\u00e9 sections for detecting chaotic motion Bifurcation diagrams by varying \\( A \\) or \\( \\omega \\)","title":"\ud83d\udd39 Additional Simulations:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-conclusions-and-future-work","text":"\u2705 The forced damped pendulum provides a rich testbed for exploring nonlinear dynamics. \u2705 Resonance, quasiperiodicity, and chaos arise depending on system parameters. \u2705 Future work could include: - Air resistance models (nonlinear damping) - Non-periodic forcing (random or aperiodic external forces) - Coupled oscillators for complex system modeling","title":"6\ufe0f\u20e3 Conclusions and Future Work"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#references-further-reading","text":"1\ufe0f\u20e3 Strogatz, S. H. (2018). Nonlinear Dynamics and Chaos . 2\ufe0f\u20e3 Taylor, J. R. (2005). Classical Mechanics . 3\ufe0f\u20e3 Numerical simulations using Python & SciPy documentation .","title":"\ud83d\udcda References &amp; Further Reading"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Orbital Period and Orbital Radius Motivation Kepler's Third Law states that the square of the orbital period is proportional to the cube of the orbital radius, and it is a foundational principle in celestial mechanics. \"The square of the period of a planet is directly proportional to the cube of the semi-major axis of its orbit.\" This elegant relationship: Helps calculate planetary distances and masses, Enables satellite and orbital dynamics modeling, Links Newtonian gravity with astronomical observations. 1. Theoretical Derivation Starting from Newton\u2019s law of universal gravitation and centripetal force: \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\Rightarrow \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Simplifying and solving for orbital velocity \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] Now, using \\( v = \\frac{2\\pi r}{T} \\) : \\[ \\frac{2\\pi r}{T} = \\sqrt{\\frac{G M}{r}} \\Rightarrow T^2 = \\frac{4\\pi^2}{G M} r^3 \\] Thus proving: \\[ T^2 \\propto r^3 \\] 2. Astronomical Implications Allows determination of planetary masses if radius and period are known. Enables accurate modeling of satellite orbits (e.g., Moon around Earth). Used in planning satellite launches and interplanetary missions. 3. Simulation (Python Code) ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.67430e-11 # m^3/kg/s^2 M = 5.972e24 # mass of Earth in kg Radii in meters (example: Low Earth Orbit to Geostationary) radii = np.linspace(7e6, 4.2e7, 100) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M)) Plotting plt.figure(figsize=(8, 5)) plt.plot(radii / 1e6, periods / 3600, color='royalblue') plt.xlabel('Orbital Radius (x10\u2076 m)') plt.ylabel('Orbital Period (hours)') plt.title('Kepler\u2019s Third Law: \\(T^2 \\\\propto r^3\\) ') plt.grid(True) plt.tight_layout() plt.show()","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-and-orbital-radius","text":"","title":"Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#motivation","text":"Kepler's Third Law states that the square of the orbital period is proportional to the cube of the orbital radius, and it is a foundational principle in celestial mechanics. \"The square of the period of a planet is directly proportional to the cube of the semi-major axis of its orbit.\" This elegant relationship: Helps calculate planetary distances and masses, Enables satellite and orbital dynamics modeling, Links Newtonian gravity with astronomical observations.","title":"Motivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-derivation","text":"Starting from Newton\u2019s law of universal gravitation and centripetal force: \\[ F_{\\text{gravity}} = F_{\\text{centripetal}} \\Rightarrow \\frac{G M m}{r^2} = \\frac{m v^2}{r} \\] Simplifying and solving for orbital velocity \\( v \\) : \\[ v = \\sqrt{\\frac{G M}{r}} \\] Now, using \\( v = \\frac{2\\pi r}{T} \\) : \\[ \\frac{2\\pi r}{T} = \\sqrt{\\frac{G M}{r}} \\Rightarrow T^2 = \\frac{4\\pi^2}{G M} r^3 \\] Thus proving: \\[ T^2 \\propto r^3 \\]","title":"1. Theoretical Derivation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-astronomical-implications","text":"Allows determination of planetary masses if radius and period are known. Enables accurate modeling of satellite orbits (e.g., Moon around Earth). Used in planning satellite launches and interplanetary missions.","title":"2. Astronomical Implications"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-simulation-python-code","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"3. Simulation (Python Code)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.67430e-11 # m^3/kg/s^2 M = 5.972e24 # mass of Earth in kg","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#radii-in-meters-example-low-earth-orbit-to-geostationary","text":"radii = np.linspace(7e6, 4.2e7, 100) periods = 2 * np.pi * np.sqrt(radii**3 / (G * M))","title":"Radii in meters (example: Low Earth Orbit to Geostationary)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting","text":"plt.figure(figsize=(8, 5)) plt.plot(radii / 1e6, periods / 3600, color='royalblue') plt.xlabel('Orbital Radius (x10\u2076 m)') plt.ylabel('Orbital Period (hours)') plt.title('Kepler\u2019s Third Law: \\(T^2 \\\\propto r^3\\) ') plt.grid(True) plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"import numpy as np import matplotlib.pyplot as plt import os Create a directory to save figures if it doesn't exist if not os.path.exists(\"figures\"): os.makedirs(\"figures\") 1. Theoretical Foundation: Calculate the projectile motion trajectory def projectile_motion(theta, v0, g=9.81, h0=0): \"\"\" Calculate the trajectory and range of a projectile. Parameters: theta (float): Launch angle in degrees v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 (default: 9.81) h0 (float): Initial height in meters (default: 0) Returns: range_x (float): Horizontal range in meters x (array): x-coordinates of the trajectory for plotting y (array): y-coordinates of the trajectory for plotting \"\"\" # Convert angle from degrees to radians theta_rad = np.radians(theta) # Calculate the x and y components of the initial velocity v0x = v0 * np.cos(theta_rad) v0y = v0 * np.sin(theta_rad) # Calculate the time of flight by solving the quadratic equation for y(t) = 0 # y(t) = h0 + v0y*t - (1/2)*g*t^2 = 0 a = -0.5 * g b = v0y c = h0 discriminant = b**2 - 4*a*c t_flight = (-b + np.sqrt(discriminant)) / (2*a) # Take the positive root # Calculate the horizontal range (range_x = v0x * t_flight) range_x = v0x * t_flight # Generate points for the trajectory (x, y coordinates) t = np.linspace(0, t_flight, 100) x = v0x * t y = h0 + v0y * t - 0.5 * g * t**2 return range_x, x, y 2. Analysis: Plot the range as a function of the launch angle def analyze_range_vs_angle(v0, g=9.81, h0=0): \"\"\" Analyze and plot the horizontal range as a function of the launch angle. Parameters: v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" # Create an array of angles from 0 to 90 degrees angles = np.linspace(0, 90, 91) ranges = [] # Calculate the range for each angle for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g, h0) ranges.append(range_x) # Plot the range vs. angle plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f\"Initial velocity = {v0} m/s, g = {g} m/s\u00b2, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Horizontal Range vs. Launch Angle\") plt.grid(True) plt.legend() plt.savefig(\"figures/range_vs_angle.png\") plt.show() 3. Visualization: Plot trajectories for different angles def plot_trajectories(v0, angles, g=9.81, h0=0): \"\"\" Plot the trajectories of the projectile for different launch angles. Parameters: v0 (float): Initial velocity in m/s angles (list): List of launch angles in degrees g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" plt.figure(figsize=(10, 6)) for theta in angles: range_x, x, y = projectile_motion(theta, v0, g, h0) plt.plot(x, y, label=f\"Angle = {theta}\u00b0\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(f\"Projectile Trajectories (Initial velocity = {v0} m/s)\") plt.grid(True) plt.legend() plt.savefig(\"figures/trajectories.png\") plt.show() 4. Comparison: Analyze the effect of different initial conditions def compare_different_conditions(): \"\"\" Compare the range for different initial velocities and heights. \"\"\" v0_values = [10, 20, 30] # Different initial velocities h0_values = [0, 10] # Different initial heights angles = np.linspace(0, 90, 91) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: for h0 in h0_values: ranges = [] for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g=9.81, h0=h0) ranges.append(range_x) plt.plot(angles, ranges, label=f\"v0 = {v0} m/s, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Range Comparison for Different Initial Conditions\") plt.grid(True) plt.legend() plt.savefig(\"figures/comparison.png\") plt.show() Main program if name == \" main \": # Define initial parameters v0 = 20 # Initial velocity in m/s angles = [15, 30, 45, 60, 75] # List of angles to plot trajectories # Step 1: Analyze the range as a function of the launch angle print(\"Analyzing the range as a function of the launch angle...\") analyze_range_vs_angle(v0) # Step 2: Plot trajectories for different angles print(\"Plotting trajectories for different angles...\") plot_trajectories(v0, angles) # Step 3: Compare the effect of different initial conditions print(\"Comparing the effect of different initial conditions...\") compare_different_conditions()","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#create-a-directory-to-save-figures-if-it-doesnt-exist","text":"if not os.path.exists(\"figures\"): os.makedirs(\"figures\")","title":"Create a directory to save figures if it doesn't exist"},{"location":"1%20Physics/2%20Gravity/Problem_2/#1-theoretical-foundation-calculate-the-projectile-motion-trajectory","text":"def projectile_motion(theta, v0, g=9.81, h0=0): \"\"\" Calculate the trajectory and range of a projectile. Parameters: theta (float): Launch angle in degrees v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 (default: 9.81) h0 (float): Initial height in meters (default: 0) Returns: range_x (float): Horizontal range in meters x (array): x-coordinates of the trajectory for plotting y (array): y-coordinates of the trajectory for plotting \"\"\" # Convert angle from degrees to radians theta_rad = np.radians(theta) # Calculate the x and y components of the initial velocity v0x = v0 * np.cos(theta_rad) v0y = v0 * np.sin(theta_rad) # Calculate the time of flight by solving the quadratic equation for y(t) = 0 # y(t) = h0 + v0y*t - (1/2)*g*t^2 = 0 a = -0.5 * g b = v0y c = h0 discriminant = b**2 - 4*a*c t_flight = (-b + np.sqrt(discriminant)) / (2*a) # Take the positive root # Calculate the horizontal range (range_x = v0x * t_flight) range_x = v0x * t_flight # Generate points for the trajectory (x, y coordinates) t = np.linspace(0, t_flight, 100) x = v0x * t y = h0 + v0y * t - 0.5 * g * t**2 return range_x, x, y","title":"1. Theoretical Foundation: Calculate the projectile motion trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_2/#2-analysis-plot-the-range-as-a-function-of-the-launch-angle","text":"def analyze_range_vs_angle(v0, g=9.81, h0=0): \"\"\" Analyze and plot the horizontal range as a function of the launch angle. Parameters: v0 (float): Initial velocity in m/s g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" # Create an array of angles from 0 to 90 degrees angles = np.linspace(0, 90, 91) ranges = [] # Calculate the range for each angle for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g, h0) ranges.append(range_x) # Plot the range vs. angle plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f\"Initial velocity = {v0} m/s, g = {g} m/s\u00b2, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Horizontal Range vs. Launch Angle\") plt.grid(True) plt.legend() plt.savefig(\"figures/range_vs_angle.png\") plt.show()","title":"2. Analysis: Plot the range as a function of the launch angle"},{"location":"1%20Physics/2%20Gravity/Problem_2/#3-visualization-plot-trajectories-for-different-angles","text":"def plot_trajectories(v0, angles, g=9.81, h0=0): \"\"\" Plot the trajectories of the projectile for different launch angles. Parameters: v0 (float): Initial velocity in m/s angles (list): List of launch angles in degrees g (float): Gravitational acceleration in m/s^2 h0 (float): Initial height in meters \"\"\" plt.figure(figsize=(10, 6)) for theta in angles: range_x, x, y = projectile_motion(theta, v0, g, h0) plt.plot(x, y, label=f\"Angle = {theta}\u00b0\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Height (m)\") plt.title(f\"Projectile Trajectories (Initial velocity = {v0} m/s)\") plt.grid(True) plt.legend() plt.savefig(\"figures/trajectories.png\") plt.show()","title":"3. Visualization: Plot trajectories for different angles"},{"location":"1%20Physics/2%20Gravity/Problem_2/#4-comparison-analyze-the-effect-of-different-initial-conditions","text":"def compare_different_conditions(): \"\"\" Compare the range for different initial velocities and heights. \"\"\" v0_values = [10, 20, 30] # Different initial velocities h0_values = [0, 10] # Different initial heights angles = np.linspace(0, 90, 91) # Angles from 0 to 90 degrees plt.figure(figsize=(10, 6)) for v0 in v0_values: for h0 in h0_values: ranges = [] for theta in angles: range_x, _, _ = projectile_motion(theta, v0, g=9.81, h0=h0) ranges.append(range_x) plt.plot(angles, ranges, label=f\"v0 = {v0} m/s, h0 = {h0} m\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Horizontal Range (m)\") plt.title(\"Range Comparison for Different Initial Conditions\") plt.grid(True) plt.legend() plt.savefig(\"figures/comparison.png\") plt.show()","title":"4. Comparison: Analyze the effect of different initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#main-program","text":"if name == \" main \": # Define initial parameters v0 = 20 # Initial velocity in m/s angles = [15, 30, 45, 60, 75] # List of angles to plot trajectories # Step 1: Analyze the range as a function of the launch angle print(\"Analyzing the range as a function of the launch angle...\") analyze_range_vs_angle(v0) # Step 2: Plot trajectories for different angles print(\"Plotting trajectories for different angles...\") plot_trajectories(v0, angles) # Step 3: Compare the effect of different initial conditions print(\"Comparing the effect of different initial conditions...\") compare_different_conditions()","title":"Main program"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}